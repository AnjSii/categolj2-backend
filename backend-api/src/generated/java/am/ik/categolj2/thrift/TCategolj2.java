/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package am.ik.categolj2.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-6-5")
public class TCategolj2 {

  public interface Iface {

    public TEntry findOnePublishedEntry(int entryId) throws TCategolj2ClientException, TCategolj2ServerException, org.apache.thrift.TException;

    public List<TEntry> findAllPublishedUpdatedRecently() throws org.apache.thrift.TException;

    public List<TLink> findAllLinks() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void findOnePublishedEntry(int entryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllPublishedUpdatedRecently(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void findAllLinks(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public TEntry findOnePublishedEntry(int entryId) throws TCategolj2ClientException, TCategolj2ServerException, org.apache.thrift.TException
    {
      send_findOnePublishedEntry(entryId);
      return recv_findOnePublishedEntry();
    }

    public void send_findOnePublishedEntry(int entryId) throws org.apache.thrift.TException
    {
      findOnePublishedEntry_args args = new findOnePublishedEntry_args();
      args.setEntryId(entryId);
      sendBase("findOnePublishedEntry", args);
    }

    public TEntry recv_findOnePublishedEntry() throws TCategolj2ClientException, TCategolj2ServerException, org.apache.thrift.TException
    {
      findOnePublishedEntry_result result = new findOnePublishedEntry_result();
      receiveBase(result, "findOnePublishedEntry");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.clientException != null) {
        throw result.clientException;
      }
      if (result.serverException != null) {
        throw result.serverException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findOnePublishedEntry failed: unknown result");
    }

    public List<TEntry> findAllPublishedUpdatedRecently() throws org.apache.thrift.TException
    {
      send_findAllPublishedUpdatedRecently();
      return recv_findAllPublishedUpdatedRecently();
    }

    public void send_findAllPublishedUpdatedRecently() throws org.apache.thrift.TException
    {
      findAllPublishedUpdatedRecently_args args = new findAllPublishedUpdatedRecently_args();
      sendBase("findAllPublishedUpdatedRecently", args);
    }

    public List<TEntry> recv_findAllPublishedUpdatedRecently() throws org.apache.thrift.TException
    {
      findAllPublishedUpdatedRecently_result result = new findAllPublishedUpdatedRecently_result();
      receiveBase(result, "findAllPublishedUpdatedRecently");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllPublishedUpdatedRecently failed: unknown result");
    }

    public List<TLink> findAllLinks() throws org.apache.thrift.TException
    {
      send_findAllLinks();
      return recv_findAllLinks();
    }

    public void send_findAllLinks() throws org.apache.thrift.TException
    {
      findAllLinks_args args = new findAllLinks_args();
      sendBase("findAllLinks", args);
    }

    public List<TLink> recv_findAllLinks() throws org.apache.thrift.TException
    {
      findAllLinks_result result = new findAllLinks_result();
      receiveBase(result, "findAllLinks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "findAllLinks failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void findOnePublishedEntry(int entryId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findOnePublishedEntry_call method_call = new findOnePublishedEntry_call(entryId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findOnePublishedEntry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private int entryId;
      public findOnePublishedEntry_call(int entryId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.entryId = entryId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findOnePublishedEntry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findOnePublishedEntry_args args = new findOnePublishedEntry_args();
        args.setEntryId(entryId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TEntry getResult() throws TCategolj2ClientException, TCategolj2ServerException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findOnePublishedEntry();
      }
    }

    public void findAllPublishedUpdatedRecently(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllPublishedUpdatedRecently_call method_call = new findAllPublishedUpdatedRecently_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllPublishedUpdatedRecently_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findAllPublishedUpdatedRecently_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllPublishedUpdatedRecently", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllPublishedUpdatedRecently_args args = new findAllPublishedUpdatedRecently_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TEntry> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllPublishedUpdatedRecently();
      }
    }

    public void findAllLinks(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      findAllLinks_call method_call = new findAllLinks_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class findAllLinks_call extends org.apache.thrift.async.TAsyncMethodCall {
      public findAllLinks_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("findAllLinks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        findAllLinks_args args = new findAllLinks_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TLink> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_findAllLinks();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("findOnePublishedEntry", new findOnePublishedEntry());
      processMap.put("findAllPublishedUpdatedRecently", new findAllPublishedUpdatedRecently());
      processMap.put("findAllLinks", new findAllLinks());
      return processMap;
    }

    public static class findOnePublishedEntry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findOnePublishedEntry_args> {
      public findOnePublishedEntry() {
        super("findOnePublishedEntry");
      }

      public findOnePublishedEntry_args getEmptyArgsInstance() {
        return new findOnePublishedEntry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findOnePublishedEntry_result getResult(I iface, findOnePublishedEntry_args args) throws org.apache.thrift.TException {
        findOnePublishedEntry_result result = new findOnePublishedEntry_result();
        try {
          result.success = iface.findOnePublishedEntry(args.entryId);
        } catch (TCategolj2ClientException clientException) {
          result.clientException = clientException;
        } catch (TCategolj2ServerException serverException) {
          result.serverException = serverException;
        }
        return result;
      }
    }

    public static class findAllPublishedUpdatedRecently<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllPublishedUpdatedRecently_args> {
      public findAllPublishedUpdatedRecently() {
        super("findAllPublishedUpdatedRecently");
      }

      public findAllPublishedUpdatedRecently_args getEmptyArgsInstance() {
        return new findAllPublishedUpdatedRecently_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllPublishedUpdatedRecently_result getResult(I iface, findAllPublishedUpdatedRecently_args args) throws org.apache.thrift.TException {
        findAllPublishedUpdatedRecently_result result = new findAllPublishedUpdatedRecently_result();
        result.success = iface.findAllPublishedUpdatedRecently();
        return result;
      }
    }

    public static class findAllLinks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, findAllLinks_args> {
      public findAllLinks() {
        super("findAllLinks");
      }

      public findAllLinks_args getEmptyArgsInstance() {
        return new findAllLinks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public findAllLinks_result getResult(I iface, findAllLinks_args args) throws org.apache.thrift.TException {
        findAllLinks_result result = new findAllLinks_result();
        result.success = iface.findAllLinks();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("findOnePublishedEntry", new findOnePublishedEntry());
      processMap.put("findAllPublishedUpdatedRecently", new findAllPublishedUpdatedRecently());
      processMap.put("findAllLinks", new findAllLinks());
      return processMap;
    }

    public static class findOnePublishedEntry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findOnePublishedEntry_args, TEntry> {
      public findOnePublishedEntry() {
        super("findOnePublishedEntry");
      }

      public findOnePublishedEntry_args getEmptyArgsInstance() {
        return new findOnePublishedEntry_args();
      }

      public AsyncMethodCallback<TEntry> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<TEntry>() { 
          public void onComplete(TEntry o) {
            findOnePublishedEntry_result result = new findOnePublishedEntry_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findOnePublishedEntry_result result = new findOnePublishedEntry_result();
            if (e instanceof TCategolj2ClientException) {
                        result.clientException = (TCategolj2ClientException) e;
                        result.setClientExceptionIsSet(true);
                        msg = result;
            }
            else             if (e instanceof TCategolj2ServerException) {
                        result.serverException = (TCategolj2ServerException) e;
                        result.setServerExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findOnePublishedEntry_args args, org.apache.thrift.async.AsyncMethodCallback<TEntry> resultHandler) throws TException {
        iface.findOnePublishedEntry(args.entryId,resultHandler);
      }
    }

    public static class findAllPublishedUpdatedRecently<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllPublishedUpdatedRecently_args, List<TEntry>> {
      public findAllPublishedUpdatedRecently() {
        super("findAllPublishedUpdatedRecently");
      }

      public findAllPublishedUpdatedRecently_args getEmptyArgsInstance() {
        return new findAllPublishedUpdatedRecently_args();
      }

      public AsyncMethodCallback<List<TEntry>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TEntry>>() { 
          public void onComplete(List<TEntry> o) {
            findAllPublishedUpdatedRecently_result result = new findAllPublishedUpdatedRecently_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllPublishedUpdatedRecently_result result = new findAllPublishedUpdatedRecently_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllPublishedUpdatedRecently_args args, org.apache.thrift.async.AsyncMethodCallback<List<TEntry>> resultHandler) throws TException {
        iface.findAllPublishedUpdatedRecently(resultHandler);
      }
    }

    public static class findAllLinks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, findAllLinks_args, List<TLink>> {
      public findAllLinks() {
        super("findAllLinks");
      }

      public findAllLinks_args getEmptyArgsInstance() {
        return new findAllLinks_args();
      }

      public AsyncMethodCallback<List<TLink>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TLink>>() { 
          public void onComplete(List<TLink> o) {
            findAllLinks_result result = new findAllLinks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            findAllLinks_result result = new findAllLinks_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, findAllLinks_args args, org.apache.thrift.async.AsyncMethodCallback<List<TLink>> resultHandler) throws TException {
        iface.findAllLinks(resultHandler);
      }
    }

  }

  public static class findOnePublishedEntry_args implements org.apache.thrift.TBase<findOnePublishedEntry_args, findOnePublishedEntry_args._Fields>, java.io.Serializable, Cloneable, Comparable<findOnePublishedEntry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOnePublishedEntry_args");

    private static final org.apache.thrift.protocol.TField ENTRY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("entryId", org.apache.thrift.protocol.TType.I32, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOnePublishedEntry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOnePublishedEntry_argsTupleSchemeFactory());
    }

    private int entryId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENTRY_ID((short)1, "entryId");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENTRY_ID
            return ENTRY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ENTRYID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENTRY_ID, new org.apache.thrift.meta_data.FieldMetaData("entryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOnePublishedEntry_args.class, metaDataMap);
    }

    public findOnePublishedEntry_args() {
    }

    public findOnePublishedEntry_args(
      int entryId)
    {
      this();
      this.entryId = entryId;
      setEntryIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOnePublishedEntry_args(findOnePublishedEntry_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.entryId = other.entryId;
    }

    public findOnePublishedEntry_args deepCopy() {
      return new findOnePublishedEntry_args(this);
    }

    @Override
    public void clear() {
      setEntryIdIsSet(false);
      this.entryId = 0;
    }

    public int getEntryId() {
      return this.entryId;
    }

    public void setEntryId(int entryId) {
      this.entryId = entryId;
      setEntryIdIsSet(true);
    }

    public void unsetEntryId() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENTRYID_ISSET_ID);
    }

    /** Returns true if field entryId is set (has been assigned a value) and false otherwise */
    public boolean isSetEntryId() {
      return EncodingUtils.testBit(__isset_bitfield, __ENTRYID_ISSET_ID);
    }

    public void setEntryIdIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENTRYID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ENTRY_ID:
        if (value == null) {
          unsetEntryId();
        } else {
          setEntryId((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ENTRY_ID:
        return Integer.valueOf(getEntryId());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ENTRY_ID:
        return isSetEntryId();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOnePublishedEntry_args)
        return this.equals((findOnePublishedEntry_args)that);
      return false;
    }

    public boolean equals(findOnePublishedEntry_args that) {
      if (that == null)
        return false;

      boolean this_present_entryId = true;
      boolean that_present_entryId = true;
      if (this_present_entryId || that_present_entryId) {
        if (!(this_present_entryId && that_present_entryId))
          return false;
        if (this.entryId != that.entryId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_entryId = true;
      list.add(present_entryId);
      if (present_entryId)
        list.add(entryId);

      return list.hashCode();
    }

    @Override
    public int compareTo(findOnePublishedEntry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetEntryId()).compareTo(other.isSetEntryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEntryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.entryId, other.entryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOnePublishedEntry_args(");
      boolean first = true;

      sb.append("entryId:");
      sb.append(this.entryId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOnePublishedEntry_argsStandardSchemeFactory implements SchemeFactory {
      public findOnePublishedEntry_argsStandardScheme getScheme() {
        return new findOnePublishedEntry_argsStandardScheme();
      }
    }

    private static class findOnePublishedEntry_argsStandardScheme extends StandardScheme<findOnePublishedEntry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOnePublishedEntry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENTRY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.entryId = iprot.readI32();
                struct.setEntryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOnePublishedEntry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ENTRY_ID_FIELD_DESC);
        oprot.writeI32(struct.entryId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOnePublishedEntry_argsTupleSchemeFactory implements SchemeFactory {
      public findOnePublishedEntry_argsTupleScheme getScheme() {
        return new findOnePublishedEntry_argsTupleScheme();
      }
    }

    private static class findOnePublishedEntry_argsTupleScheme extends TupleScheme<findOnePublishedEntry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOnePublishedEntry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetEntryId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEntryId()) {
          oprot.writeI32(struct.entryId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOnePublishedEntry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.entryId = iprot.readI32();
          struct.setEntryIdIsSet(true);
        }
      }
    }

  }

  public static class findOnePublishedEntry_result implements org.apache.thrift.TBase<findOnePublishedEntry_result, findOnePublishedEntry_result._Fields>, java.io.Serializable, Cloneable, Comparable<findOnePublishedEntry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findOnePublishedEntry_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField CLIENT_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("clientException", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SERVER_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("serverException", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findOnePublishedEntry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findOnePublishedEntry_resultTupleSchemeFactory());
    }

    private TEntry success; // required
    private TCategolj2ClientException clientException; // required
    private TCategolj2ServerException serverException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      CLIENT_EXCEPTION((short)1, "clientException"),
      SERVER_EXCEPTION((short)2, "serverException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // CLIENT_EXCEPTION
            return CLIENT_EXCEPTION;
          case 2: // SERVER_EXCEPTION
            return SERVER_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEntry.class)));
      tmpMap.put(_Fields.CLIENT_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("clientException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.SERVER_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("serverException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findOnePublishedEntry_result.class, metaDataMap);
    }

    public findOnePublishedEntry_result() {
    }

    public findOnePublishedEntry_result(
      TEntry success,
      TCategolj2ClientException clientException,
      TCategolj2ServerException serverException)
    {
      this();
      this.success = success;
      this.clientException = clientException;
      this.serverException = serverException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findOnePublishedEntry_result(findOnePublishedEntry_result other) {
      if (other.isSetSuccess()) {
        this.success = new TEntry(other.success);
      }
      if (other.isSetClientException()) {
        this.clientException = new TCategolj2ClientException(other.clientException);
      }
      if (other.isSetServerException()) {
        this.serverException = new TCategolj2ServerException(other.serverException);
      }
    }

    public findOnePublishedEntry_result deepCopy() {
      return new findOnePublishedEntry_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.clientException = null;
      this.serverException = null;
    }

    public TEntry getSuccess() {
      return this.success;
    }

    public void setSuccess(TEntry success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public TCategolj2ClientException getClientException() {
      return this.clientException;
    }

    public void setClientException(TCategolj2ClientException clientException) {
      this.clientException = clientException;
    }

    public void unsetClientException() {
      this.clientException = null;
    }

    /** Returns true if field clientException is set (has been assigned a value) and false otherwise */
    public boolean isSetClientException() {
      return this.clientException != null;
    }

    public void setClientExceptionIsSet(boolean value) {
      if (!value) {
        this.clientException = null;
      }
    }

    public TCategolj2ServerException getServerException() {
      return this.serverException;
    }

    public void setServerException(TCategolj2ServerException serverException) {
      this.serverException = serverException;
    }

    public void unsetServerException() {
      this.serverException = null;
    }

    /** Returns true if field serverException is set (has been assigned a value) and false otherwise */
    public boolean isSetServerException() {
      return this.serverException != null;
    }

    public void setServerExceptionIsSet(boolean value) {
      if (!value) {
        this.serverException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TEntry)value);
        }
        break;

      case CLIENT_EXCEPTION:
        if (value == null) {
          unsetClientException();
        } else {
          setClientException((TCategolj2ClientException)value);
        }
        break;

      case SERVER_EXCEPTION:
        if (value == null) {
          unsetServerException();
        } else {
          setServerException((TCategolj2ServerException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case CLIENT_EXCEPTION:
        return getClientException();

      case SERVER_EXCEPTION:
        return getServerException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case CLIENT_EXCEPTION:
        return isSetClientException();
      case SERVER_EXCEPTION:
        return isSetServerException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findOnePublishedEntry_result)
        return this.equals((findOnePublishedEntry_result)that);
      return false;
    }

    public boolean equals(findOnePublishedEntry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_clientException = true && this.isSetClientException();
      boolean that_present_clientException = true && that.isSetClientException();
      if (this_present_clientException || that_present_clientException) {
        if (!(this_present_clientException && that_present_clientException))
          return false;
        if (!this.clientException.equals(that.clientException))
          return false;
      }

      boolean this_present_serverException = true && this.isSetServerException();
      boolean that_present_serverException = true && that.isSetServerException();
      if (this_present_serverException || that_present_serverException) {
        if (!(this_present_serverException && that_present_serverException))
          return false;
        if (!this.serverException.equals(that.serverException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_clientException = true && (isSetClientException());
      list.add(present_clientException);
      if (present_clientException)
        list.add(clientException);

      boolean present_serverException = true && (isSetServerException());
      list.add(present_serverException);
      if (present_serverException)
        list.add(serverException);

      return list.hashCode();
    }

    @Override
    public int compareTo(findOnePublishedEntry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetClientException()).compareTo(other.isSetClientException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientException, other.clientException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetServerException()).compareTo(other.isSetServerException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetServerException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serverException, other.serverException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findOnePublishedEntry_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientException:");
      if (this.clientException == null) {
        sb.append("null");
      } else {
        sb.append(this.clientException);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("serverException:");
      if (this.serverException == null) {
        sb.append("null");
      } else {
        sb.append(this.serverException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findOnePublishedEntry_resultStandardSchemeFactory implements SchemeFactory {
      public findOnePublishedEntry_resultStandardScheme getScheme() {
        return new findOnePublishedEntry_resultStandardScheme();
      }
    }

    private static class findOnePublishedEntry_resultStandardScheme extends StandardScheme<findOnePublishedEntry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findOnePublishedEntry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TEntry();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // CLIENT_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.clientException = new TCategolj2ClientException();
                struct.clientException.read(iprot);
                struct.setClientExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SERVER_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.serverException = new TCategolj2ServerException();
                struct.serverException.read(iprot);
                struct.setServerExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findOnePublishedEntry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientException != null) {
          oprot.writeFieldBegin(CLIENT_EXCEPTION_FIELD_DESC);
          struct.clientException.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.serverException != null) {
          oprot.writeFieldBegin(SERVER_EXCEPTION_FIELD_DESC);
          struct.serverException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findOnePublishedEntry_resultTupleSchemeFactory implements SchemeFactory {
      public findOnePublishedEntry_resultTupleScheme getScheme() {
        return new findOnePublishedEntry_resultTupleScheme();
      }
    }

    private static class findOnePublishedEntry_resultTupleScheme extends TupleScheme<findOnePublishedEntry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findOnePublishedEntry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetClientException()) {
          optionals.set(1);
        }
        if (struct.isSetServerException()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetClientException()) {
          struct.clientException.write(oprot);
        }
        if (struct.isSetServerException()) {
          struct.serverException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findOnePublishedEntry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TEntry();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientException = new TCategolj2ClientException();
          struct.clientException.read(iprot);
          struct.setClientExceptionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.serverException = new TCategolj2ServerException();
          struct.serverException.read(iprot);
          struct.setServerExceptionIsSet(true);
        }
      }
    }

  }

  public static class findAllPublishedUpdatedRecently_args implements org.apache.thrift.TBase<findAllPublishedUpdatedRecently_args, findAllPublishedUpdatedRecently_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllPublishedUpdatedRecently_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllPublishedUpdatedRecently_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllPublishedUpdatedRecently_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllPublishedUpdatedRecently_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllPublishedUpdatedRecently_args.class, metaDataMap);
    }

    public findAllPublishedUpdatedRecently_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllPublishedUpdatedRecently_args(findAllPublishedUpdatedRecently_args other) {
    }

    public findAllPublishedUpdatedRecently_args deepCopy() {
      return new findAllPublishedUpdatedRecently_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllPublishedUpdatedRecently_args)
        return this.equals((findAllPublishedUpdatedRecently_args)that);
      return false;
    }

    public boolean equals(findAllPublishedUpdatedRecently_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllPublishedUpdatedRecently_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllPublishedUpdatedRecently_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllPublishedUpdatedRecently_argsStandardSchemeFactory implements SchemeFactory {
      public findAllPublishedUpdatedRecently_argsStandardScheme getScheme() {
        return new findAllPublishedUpdatedRecently_argsStandardScheme();
      }
    }

    private static class findAllPublishedUpdatedRecently_argsStandardScheme extends StandardScheme<findAllPublishedUpdatedRecently_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllPublishedUpdatedRecently_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllPublishedUpdatedRecently_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllPublishedUpdatedRecently_argsTupleSchemeFactory implements SchemeFactory {
      public findAllPublishedUpdatedRecently_argsTupleScheme getScheme() {
        return new findAllPublishedUpdatedRecently_argsTupleScheme();
      }
    }

    private static class findAllPublishedUpdatedRecently_argsTupleScheme extends TupleScheme<findAllPublishedUpdatedRecently_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllPublishedUpdatedRecently_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllPublishedUpdatedRecently_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findAllPublishedUpdatedRecently_result implements org.apache.thrift.TBase<findAllPublishedUpdatedRecently_result, findAllPublishedUpdatedRecently_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllPublishedUpdatedRecently_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllPublishedUpdatedRecently_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllPublishedUpdatedRecently_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllPublishedUpdatedRecently_resultTupleSchemeFactory());
    }

    private List<TEntry> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TEntry.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllPublishedUpdatedRecently_result.class, metaDataMap);
    }

    public findAllPublishedUpdatedRecently_result() {
    }

    public findAllPublishedUpdatedRecently_result(
      List<TEntry> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllPublishedUpdatedRecently_result(findAllPublishedUpdatedRecently_result other) {
      if (other.isSetSuccess()) {
        List<TEntry> __this__success = new ArrayList<TEntry>(other.success.size());
        for (TEntry other_element : other.success) {
          __this__success.add(new TEntry(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllPublishedUpdatedRecently_result deepCopy() {
      return new findAllPublishedUpdatedRecently_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TEntry> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TEntry elem) {
      if (this.success == null) {
        this.success = new ArrayList<TEntry>();
      }
      this.success.add(elem);
    }

    public List<TEntry> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<TEntry> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TEntry>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllPublishedUpdatedRecently_result)
        return this.equals((findAllPublishedUpdatedRecently_result)that);
      return false;
    }

    public boolean equals(findAllPublishedUpdatedRecently_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllPublishedUpdatedRecently_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllPublishedUpdatedRecently_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllPublishedUpdatedRecently_resultStandardSchemeFactory implements SchemeFactory {
      public findAllPublishedUpdatedRecently_resultStandardScheme getScheme() {
        return new findAllPublishedUpdatedRecently_resultStandardScheme();
      }
    }

    private static class findAllPublishedUpdatedRecently_resultStandardScheme extends StandardScheme<findAllPublishedUpdatedRecently_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllPublishedUpdatedRecently_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<TEntry>(_list0.size);
                  TEntry _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new TEntry();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllPublishedUpdatedRecently_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TEntry _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllPublishedUpdatedRecently_resultTupleSchemeFactory implements SchemeFactory {
      public findAllPublishedUpdatedRecently_resultTupleScheme getScheme() {
        return new findAllPublishedUpdatedRecently_resultTupleScheme();
      }
    }

    private static class findAllPublishedUpdatedRecently_resultTupleScheme extends TupleScheme<findAllPublishedUpdatedRecently_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllPublishedUpdatedRecently_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TEntry _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllPublishedUpdatedRecently_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TEntry>(_list5.size);
            TEntry _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new TEntry();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class findAllLinks_args implements org.apache.thrift.TBase<findAllLinks_args, findAllLinks_args._Fields>, java.io.Serializable, Cloneable, Comparable<findAllLinks_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllLinks_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllLinks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllLinks_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllLinks_args.class, metaDataMap);
    }

    public findAllLinks_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllLinks_args(findAllLinks_args other) {
    }

    public findAllLinks_args deepCopy() {
      return new findAllLinks_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllLinks_args)
        return this.equals((findAllLinks_args)that);
      return false;
    }

    public boolean equals(findAllLinks_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllLinks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllLinks_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllLinks_argsStandardSchemeFactory implements SchemeFactory {
      public findAllLinks_argsStandardScheme getScheme() {
        return new findAllLinks_argsStandardScheme();
      }
    }

    private static class findAllLinks_argsStandardScheme extends StandardScheme<findAllLinks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllLinks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllLinks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllLinks_argsTupleSchemeFactory implements SchemeFactory {
      public findAllLinks_argsTupleScheme getScheme() {
        return new findAllLinks_argsTupleScheme();
      }
    }

    private static class findAllLinks_argsTupleScheme extends TupleScheme<findAllLinks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllLinks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllLinks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class findAllLinks_result implements org.apache.thrift.TBase<findAllLinks_result, findAllLinks_result._Fields>, java.io.Serializable, Cloneable, Comparable<findAllLinks_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("findAllLinks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new findAllLinks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new findAllLinks_resultTupleSchemeFactory());
    }

    private List<TLink> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TLink.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(findAllLinks_result.class, metaDataMap);
    }

    public findAllLinks_result() {
    }

    public findAllLinks_result(
      List<TLink> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public findAllLinks_result(findAllLinks_result other) {
      if (other.isSetSuccess()) {
        List<TLink> __this__success = new ArrayList<TLink>(other.success.size());
        for (TLink other_element : other.success) {
          __this__success.add(new TLink(other_element));
        }
        this.success = __this__success;
      }
    }

    public findAllLinks_result deepCopy() {
      return new findAllLinks_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TLink> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TLink elem) {
      if (this.success == null) {
        this.success = new ArrayList<TLink>();
      }
      this.success.add(elem);
    }

    public List<TLink> getSuccess() {
      return this.success;
    }

    public void setSuccess(List<TLink> success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TLink>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof findAllLinks_result)
        return this.equals((findAllLinks_result)that);
      return false;
    }

    public boolean equals(findAllLinks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    @Override
    public int compareTo(findAllLinks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("findAllLinks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class findAllLinks_resultStandardSchemeFactory implements SchemeFactory {
      public findAllLinks_resultStandardScheme getScheme() {
        return new findAllLinks_resultStandardScheme();
      }
    }

    private static class findAllLinks_resultStandardScheme extends StandardScheme<findAllLinks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, findAllLinks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<TLink>(_list8.size);
                  TLink _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new TLink();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, findAllLinks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TLink _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class findAllLinks_resultTupleSchemeFactory implements SchemeFactory {
      public findAllLinks_resultTupleScheme getScheme() {
        return new findAllLinks_resultTupleScheme();
      }
    }

    private static class findAllLinks_resultTupleScheme extends TupleScheme<findAllLinks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, findAllLinks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TLink _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, findAllLinks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TLink>(_list13.size);
            TLink _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new TLink();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
